
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000298  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a4  080003a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a4  080003a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003a4  080003a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a4  080003a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003ac  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003b0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003b0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d77  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000456  00000000  00000000  00020da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009e4  00000000  00000000  000211fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00021be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00021da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f7a  00000000  00000000  00021f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001651  00000000  00000000  00022e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00078d81  00000000  00000000  000244e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0009d264  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000534  00000000  00000000  0009d2e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800038c 	.word	0x0800038c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800038c 	.word	0x0800038c

0800014c <clock_init>:
#define GPIOB_IDR *(volatile uint32_t *)(GPIOB_Base+0x08)


//TO initialize the clock for the APB2 Bus
void clock_init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//Enabling the clock to APB2 bus GPIOA
	RCC_APB2ENR |= (1<<2);
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <clock_init+0x24>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <clock_init+0x24>)
 8000156:	f043 0304 	orr.w	r3, r3, #4
 800015a:	6013      	str	r3, [r2, #0]

	//Enabling the clock to APB2 bus GPIOB
	RCC_APB2ENR |= (1<<3);
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <clock_init+0x24>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <clock_init+0x24>)
 8000162:	f043 0308 	orr.w	r3, r3, #8
 8000166:	6013      	str	r3, [r2, #0]

}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	40021018 	.word	0x40021018

08000174 <gpio_init>:
//TO initialize the GPIOA and Pin 13
void gpio_init()
{
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
	GPIOA_CRL= 0;
 8000178:	4b18      	ldr	r3, [pc, #96]	; (80001dc <gpio_init+0x68>)
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
	GPIOB_CRL= 0;
 800017e:	4b18      	ldr	r3, [pc, #96]	; (80001e0 <gpio_init+0x6c>)
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
	GPIOA_CRH= 0;
 8000184:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <gpio_init+0x70>)
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
	GPIOB_CRH= 0;
 800018a:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <gpio_init+0x74>)
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
	GPIOA_ODR= 0;
 8000190:	4b16      	ldr	r3, [pc, #88]	; (80001ec <gpio_init+0x78>)
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
	//PA1 FLOATING IN
	GPIOA_CRL|=1<<6;
 8000196:	4b11      	ldr	r3, [pc, #68]	; (80001dc <gpio_init+0x68>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a10      	ldr	r2, [pc, #64]	; (80001dc <gpio_init+0x68>)
 800019c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001a0:	6013      	str	r3, [r2, #0]
	//PA13 FLOATING IN
	GPIOA_CRH&=~(0b11<<20);
 80001a2:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <gpio_init+0x70>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a0f      	ldr	r2, [pc, #60]	; (80001e4 <gpio_init+0x70>)
 80001a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001ac:	6013      	str	r3, [r2, #0]
	GPIOA_CRH|=(1<<22);
 80001ae:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <gpio_init+0x70>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a0c      	ldr	r2, [pc, #48]	; (80001e4 <gpio_init+0x70>)
 80001b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001b8:	6013      	str	r3, [r2, #0]

	//PB1 OUT PUSH-PULL MODE
	GPIOB_CRL|=(1<<4);
 80001ba:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <gpio_init+0x6c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a08      	ldr	r2, [pc, #32]	; (80001e0 <gpio_init+0x6c>)
 80001c0:	f043 0310 	orr.w	r3, r3, #16
 80001c4:	6013      	str	r3, [r2, #0]
	//PB13 OUT PUSH-PULL MODE
	GPIOB_CRH|=(1<<20);
 80001c6:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <gpio_init+0x74>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a07      	ldr	r2, [pc, #28]	; (80001e8 <gpio_init+0x74>)
 80001cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001d0:	6013      	str	r3, [r2, #0]

}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	40010800 	.word	0x40010800
 80001e0:	40010c00 	.word	0x40010c00
 80001e4:	40010804 	.word	0x40010804
 80001e8:	40010c04 	.word	0x40010c04
 80001ec:	4001080c 	.word	0x4001080c

080001f0 <main>:


int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
	int i;
	clock_init();
 80001f6:	f7ff ffa9 	bl	800014c <clock_init>
	gpio_init();
 80001fa:	f7ff ffbb 	bl	8000174 <gpio_init>


	while(1)
	{
	//PA1>> PULL UP RESISTOR
	if(((GPIOA_IDR&(1<<1))>>1)==0)//single press
 80001fe:	4b1b      	ldr	r3, [pc, #108]	; (800026c <main+0x7c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f003 0302 	and.w	r3, r3, #2
 8000206:	2b00      	cmp	r3, #0
 8000208:	d10c      	bne.n	8000224 <main+0x34>
	{
		GPIOB_ODR^=(1<<1);
 800020a:	4b19      	ldr	r3, [pc, #100]	; (8000270 <main+0x80>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a18      	ldr	r2, [pc, #96]	; (8000270 <main+0x80>)
 8000210:	f083 0302 	eor.w	r3, r3, #2
 8000214:	6013      	str	r3, [r2, #0]
		while((((GPIOA_IDR&(1<<1))>>1)==0));
 8000216:	bf00      	nop
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <main+0x7c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f003 0302 	and.w	r3, r3, #2
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0f9      	beq.n	8000218 <main+0x28>
	}
	//PA13>> PULL DOWN RESISTOR
	if(((GPIOA_IDR&(1<<13))>>13)==1) //multipress
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <main+0x7c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	0b5b      	lsrs	r3, r3, #13
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	2b01      	cmp	r3, #1
 8000230:	d1e5      	bne.n	80001fe <main+0xe>
	{
		GPIOB_ODR^=(1<<13);
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <main+0x80>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a0e      	ldr	r2, [pc, #56]	; (8000270 <main+0x80>)
 8000238:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800023c:	6013      	str	r3, [r2, #0]
		for(i=0;i<50000;i++);
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e002      	b.n	800024a <main+0x5a>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000250:	4293      	cmp	r3, r2
 8000252:	ddf7      	ble.n	8000244 <main+0x54>
		for(i=0;i<50000;i++);
 8000254:	2300      	movs	r3, #0
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	e002      	b.n	8000260 <main+0x70>
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3301      	adds	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000266:	4293      	cmp	r3, r2
 8000268:	ddf7      	ble.n	800025a <main+0x6a>
	if(((GPIOA_IDR&(1<<1))>>1)==0)//single press
 800026a:	e7c8      	b.n	80001fe <main+0xe>
 800026c:	40010808 	.word	0x40010808
 8000270:	40010c0c 	.word	0x40010c0c

08000274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000284:	e7fe      	b.n	8000284 <HardFault_Handler+0x4>

08000286 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800028a:	e7fe      	b.n	800028a <MemManage_Handler+0x4>

0800028c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler+0x4>

08000292 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000296:	e7fe      	b.n	8000296 <UsageFault_Handler+0x4>

08000298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c0:	f000 f82e 	bl	8000320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	; (800030c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	; (8000318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002fa:	f7ff ffe5 	bl	80002c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002fe:	f000 f821 	bl	8000344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ff75 	bl	80001f0 <main>
  bx lr
 8000306:	4770      	bx	lr
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000310:	080003ac 	.word	0x080003ac
  ldr r2, =_sbss
 8000314:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000318:	20000024 	.word	0x20000024

0800031c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC1_2_IRQHandler>
	...

08000320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <HAL_IncTick+0x1c>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	461a      	mov	r2, r3
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <HAL_IncTick+0x20>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4413      	add	r3, r2
 8000330:	4a03      	ldr	r2, [pc, #12]	; (8000340 <HAL_IncTick+0x20>)
 8000332:	6013      	str	r3, [r2, #0]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	20000000 	.word	0x20000000
 8000340:	20000020 	.word	0x20000020

08000344 <__libc_init_array>:
 8000344:	b570      	push	{r4, r5, r6, lr}
 8000346:	2500      	movs	r5, #0
 8000348:	4e0c      	ldr	r6, [pc, #48]	; (800037c <__libc_init_array+0x38>)
 800034a:	4c0d      	ldr	r4, [pc, #52]	; (8000380 <__libc_init_array+0x3c>)
 800034c:	1ba4      	subs	r4, r4, r6
 800034e:	10a4      	asrs	r4, r4, #2
 8000350:	42a5      	cmp	r5, r4
 8000352:	d109      	bne.n	8000368 <__libc_init_array+0x24>
 8000354:	f000 f81a 	bl	800038c <_init>
 8000358:	2500      	movs	r5, #0
 800035a:	4e0a      	ldr	r6, [pc, #40]	; (8000384 <__libc_init_array+0x40>)
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <__libc_init_array+0x44>)
 800035e:	1ba4      	subs	r4, r4, r6
 8000360:	10a4      	asrs	r4, r4, #2
 8000362:	42a5      	cmp	r5, r4
 8000364:	d105      	bne.n	8000372 <__libc_init_array+0x2e>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800036c:	4798      	blx	r3
 800036e:	3501      	adds	r5, #1
 8000370:	e7ee      	b.n	8000350 <__libc_init_array+0xc>
 8000372:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000376:	4798      	blx	r3
 8000378:	3501      	adds	r5, #1
 800037a:	e7f2      	b.n	8000362 <__libc_init_array+0x1e>
 800037c:	080003a4 	.word	0x080003a4
 8000380:	080003a4 	.word	0x080003a4
 8000384:	080003a4 	.word	0x080003a4
 8000388:	080003a8 	.word	0x080003a8

0800038c <_init>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr

08000398 <_fini>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr
