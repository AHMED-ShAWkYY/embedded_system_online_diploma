
drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000440  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000570  08000578  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000570  08000570  00010578  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00010578  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000578  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000574  08000574  00010574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000578  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000578  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010578  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001918  00000000  00000000  000105a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003d5  00000000  00000000  00011eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  0001228e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  000126e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000127a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b01  00000000  00000000  00012838  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000c5f  00000000  00000000  00014339  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000768b  00000000  00000000  00014f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c623  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000558 	.word	0x08000558

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000558 	.word	0x08000558

08000170 <clock_init>:
#endif
#include "../stm32_f103c6_drivers/inc/stm32f103c6_gpio_driver.h"
#include "../stm32_f103c6_drivers/inc/stm32f103x6.h"
//TO initialize the clock for the APB2 Bus
void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enabling the clock to APB2 bus GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enabling the clock to APB2 bus GPIOB
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <gpio_init>:
//TO initialize the GPIOA and Pin 13
void gpio_init()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	//determine the configuration of the pin
	GPIO_Pin_config_t pinconfig;
	//PA1 Floating input
	pinconfig.GPIO_Pin_number=GPIO_PIN_1;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_mode_define=GPIO_MODE_INPUT_FLO;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &pinconfig);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <gpio_init+0x64>)
 80001ac:	f000 f8fd 	bl	80003aa <MCAL_GPIO_INIT>
	//PB1 push pull output
	pinconfig.GPIO_Pin_number=GPIO_PIN_1;
 80001b0:	2302      	movs	r3, #2
 80001b2:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_mode_define=GPIO_MODE_OUTPUT_PP;
 80001b4:	2304      	movs	r3, #4
 80001b6:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_output_speed=GPIO_speed_10M;
 80001b8:	2301      	movs	r3, #1
 80001ba:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &pinconfig);
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4619      	mov	r1, r3
 80001c0:	480f      	ldr	r0, [pc, #60]	; (8000200 <gpio_init+0x68>)
 80001c2:	f000 f8f2 	bl	80003aa <MCAL_GPIO_INIT>
	//PA13 Floating input
	pinconfig.GPIO_Pin_number=GPIO_PIN_13;
 80001c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ca:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_mode_define=GPIO_MODE_INPUT_FLO;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &pinconfig);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4809      	ldr	r0, [pc, #36]	; (80001fc <gpio_init+0x64>)
 80001d6:	f000 f8e8 	bl	80003aa <MCAL_GPIO_INIT>
	//PB13 push pull output
	pinconfig.GPIO_Pin_number=GPIO_PIN_13;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
	pinconfig.GPIO_mode_define=GPIO_MODE_OUTPUT_PP;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
	pinconfig.GPIO_output_speed=GPIO_speed_10M;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &pinconfig);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <gpio_init+0x68>)
 80001ee:	f000 f8dc 	bl	80003aa <MCAL_GPIO_INIT>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <wait>:

void wait ()
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	unsigned int i,j;
	for(i=0;i<100;i++)
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e00b      	b.n	8000228 <wait+0x24>
	{
		for(j=0;j<255;j++)
 8000210:	2300      	movs	r3, #0
 8000212:	603b      	str	r3, [r7, #0]
 8000214:	e002      	b.n	800021c <wait+0x18>
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	603b      	str	r3, [r7, #0]
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	2bfe      	cmp	r3, #254	; 0xfe
 8000220:	d9f9      	bls.n	8000216 <wait+0x12>
	for(i=0;i<100;i++)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	3301      	adds	r3, #1
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b63      	cmp	r3, #99	; 0x63
 800022c:	d9f0      	bls.n	8000210 <wait+0xc>
		{

		}
	}
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <main>:
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0

	clock_init();
 800023c:	f7ff ff98 	bl	8000170 <clock_init>
	gpio_init();
 8000240:	f7ff ffaa 	bl	8000198 <gpio_init>
//		wait();
//		MCAL_GPIO_toggle_Pin(GPIOB, GPIO_PIN_1);
//		wait();

		//PA1>> PULL UP RESISTOR
		if(MCAL_GPIO_Read_Pin(GPIOA,GPIO_PIN_1)==0)//single press
 8000244:	2102      	movs	r1, #2
 8000246:	4811      	ldr	r0, [pc, #68]	; (800028c <main+0x54>)
 8000248:	f000 f934 	bl	80004b4 <MCAL_GPIO_Read_Pin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d10b      	bne.n	800026a <main+0x32>
		{
			MCAL_GPIO_toggle_Pin(GPIOB,GPIO_PIN_1);
 8000252:	2102      	movs	r1, #2
 8000254:	480e      	ldr	r0, [pc, #56]	; (8000290 <main+0x58>)
 8000256:	f000 f949 	bl	80004ec <MCAL_GPIO_toggle_Pin>
			while(MCAL_GPIO_Read_Pin(GPIOA,GPIO_PIN_1)==0);
 800025a:	bf00      	nop
 800025c:	2102      	movs	r1, #2
 800025e:	480b      	ldr	r0, [pc, #44]	; (800028c <main+0x54>)
 8000260:	f000 f928 	bl	80004b4 <MCAL_GPIO_Read_Pin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f8      	beq.n	800025c <main+0x24>
		}
		//PA13>> PULL DOWN RESISTOR
		if(MCAL_GPIO_Read_Pin(GPIOA,GPIO_PIN_13)==1)//multi press
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	4807      	ldr	r0, [pc, #28]	; (800028c <main+0x54>)
 8000270:	f000 f920 	bl	80004b4 <MCAL_GPIO_Read_Pin>
 8000274:	4603      	mov	r3, r0
 8000276:	2b01      	cmp	r3, #1
 8000278:	d104      	bne.n	8000284 <main+0x4c>
			{
				MCAL_GPIO_toggle_Pin(GPIOB,GPIO_PIN_13);
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	4804      	ldr	r0, [pc, #16]	; (8000290 <main+0x58>)
 8000280:	f000 f934 	bl	80004ec <MCAL_GPIO_toggle_Pin>
			}
			wait();
 8000284:	f7ff ffbe 	bl	8000204 <wait>
		if(MCAL_GPIO_Read_Pin(GPIOA,GPIO_PIN_1)==0)//single press
 8000288:	e7dc      	b.n	8000244 <main+0xc>
 800028a:	bf00      	nop
 800028c:	40010800 	.word	0x40010800
 8000290:	40010c00 	.word	0x40010c00

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000298:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029e:	490d      	ldr	r1, [pc, #52]	; (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <LoopForever+0xe>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a4:	e002      	b.n	80002ac <LoopCopyDataInit>

080002a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002aa:	3304      	adds	r3, #4

080002ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b0:	d3f9      	bcc.n	80002a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b4:	4c0a      	ldr	r4, [pc, #40]	; (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b8:	e001      	b.n	80002be <LoopFillZerobss>

080002ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002bc:	3204      	adds	r2, #4

080002be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c0:	d3fb      	bcc.n	80002ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 f925 	bl	8000510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c6:	f7ff ffb7 	bl	8000238 <main>

080002ca <LoopForever>:

LoopForever:
    b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d8:	08000578 	.word	0x08000578
  ldr r2, =_sbss
 80002dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>

080002e6 <Get_CRLH_Position>:
 *  Created on: Aug 2, 2022
 *      Author: ahmed shawki
 */
#include "inc/stm32f103c6_gpio_driver.h"
uint8_t Get_CRLH_Position(uint16_t pin_number)
{
 80002e6:	b480      	push	{r7}
 80002e8:	b083      	sub	sp, #12
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	4603      	mov	r3, r0
 80002ee:	80fb      	strh	r3, [r7, #6]
switch(pin_number)
 80002f0:	88fb      	ldrh	r3, [r7, #6]
 80002f2:	2b80      	cmp	r3, #128	; 0x80
 80002f4:	d042      	beq.n	800037c <Get_CRLH_Position+0x96>
 80002f6:	2b80      	cmp	r3, #128	; 0x80
 80002f8:	dc11      	bgt.n	800031e <Get_CRLH_Position+0x38>
 80002fa:	2b08      	cmp	r3, #8
 80002fc:	d036      	beq.n	800036c <Get_CRLH_Position+0x86>
 80002fe:	2b08      	cmp	r3, #8
 8000300:	dc06      	bgt.n	8000310 <Get_CRLH_Position+0x2a>
 8000302:	2b02      	cmp	r3, #2
 8000304:	d02e      	beq.n	8000364 <Get_CRLH_Position+0x7e>
 8000306:	2b04      	cmp	r3, #4
 8000308:	d02e      	beq.n	8000368 <Get_CRLH_Position+0x82>
 800030a:	2b01      	cmp	r3, #1
 800030c:	d028      	beq.n	8000360 <Get_CRLH_Position+0x7a>
 800030e:	e047      	b.n	80003a0 <Get_CRLH_Position+0xba>
 8000310:	2b20      	cmp	r3, #32
 8000312:	d02f      	beq.n	8000374 <Get_CRLH_Position+0x8e>
 8000314:	2b40      	cmp	r3, #64	; 0x40
 8000316:	d02f      	beq.n	8000378 <Get_CRLH_Position+0x92>
 8000318:	2b10      	cmp	r3, #16
 800031a:	d029      	beq.n	8000370 <Get_CRLH_Position+0x8a>
 800031c:	e040      	b.n	80003a0 <Get_CRLH_Position+0xba>
 800031e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000322:	d033      	beq.n	800038c <Get_CRLH_Position+0xa6>
 8000324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000328:	dc09      	bgt.n	800033e <Get_CRLH_Position+0x58>
 800032a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800032e:	d029      	beq.n	8000384 <Get_CRLH_Position+0x9e>
 8000330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000334:	d028      	beq.n	8000388 <Get_CRLH_Position+0xa2>
 8000336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800033a:	d021      	beq.n	8000380 <Get_CRLH_Position+0x9a>
 800033c:	e030      	b.n	80003a0 <Get_CRLH_Position+0xba>
 800033e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000342:	d027      	beq.n	8000394 <Get_CRLH_Position+0xae>
 8000344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000348:	dc03      	bgt.n	8000352 <Get_CRLH_Position+0x6c>
 800034a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800034e:	d01f      	beq.n	8000390 <Get_CRLH_Position+0xaa>
 8000350:	e026      	b.n	80003a0 <Get_CRLH_Position+0xba>
 8000352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000356:	d01f      	beq.n	8000398 <Get_CRLH_Position+0xb2>
 8000358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800035c:	d01e      	beq.n	800039c <Get_CRLH_Position+0xb6>
 800035e:	e01f      	b.n	80003a0 <Get_CRLH_Position+0xba>
{
case GPIO_PIN_0:
	return 0 ;
 8000360:	2300      	movs	r3, #0
 8000362:	e01d      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_1:
	return 4 ;
 8000364:	2304      	movs	r3, #4
 8000366:	e01b      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_2:
	return 8 ;
 8000368:	2308      	movs	r3, #8
 800036a:	e019      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_3:
	return 12 ;
 800036c:	230c      	movs	r3, #12
 800036e:	e017      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_4:
	return 16 ;
 8000370:	2310      	movs	r3, #16
 8000372:	e015      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_5:
	return 20 ;
 8000374:	2314      	movs	r3, #20
 8000376:	e013      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_6:
	return 24 ;
 8000378:	2318      	movs	r3, #24
 800037a:	e011      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_7:
	return 28 ;
 800037c:	231c      	movs	r3, #28
 800037e:	e00f      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_8:
	return 0 ;
 8000380:	2300      	movs	r3, #0
 8000382:	e00d      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_9:
	return 4 ;
 8000384:	2304      	movs	r3, #4
 8000386:	e00b      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_10:
	return 8 ;
 8000388:	2308      	movs	r3, #8
 800038a:	e009      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_11:
	return 12 ;
 800038c:	230c      	movs	r3, #12
 800038e:	e007      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_12:
	return 16 ;
 8000390:	2310      	movs	r3, #16
 8000392:	e005      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_13:
	return 20 ;
 8000394:	2314      	movs	r3, #20
 8000396:	e003      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_14:
	return 24 ;
 8000398:	2318      	movs	r3, #24
 800039a:	e001      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;
case GPIO_PIN_15:
	return 28 ;
 800039c:	231c      	movs	r3, #28
 800039e:	e7ff      	b.n	80003a0 <Get_CRLH_Position+0xba>
	break;

}
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <MCAL_GPIO_INIT>:
* @retval 		- none
* Note			- the stm32f103c6 has ports A,B,C,D,E
* 				  but if you use LFQP48 package it uses only A,B and part of C,D
*/
void   MCAL_GPIO_INIT(GPIO_typedef *GPIOX,GPIO_Pin_config_t* pin_config)
{
 80003aa:	b590      	push	{r4, r7, lr}
 80003ac:	b085      	sub	sp, #20
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	6039      	str	r1, [r7, #0]
	volatile uint32_t *config_register=NULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
	volatile uint8_t PIN_CONFIG=0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	72fb      	strb	r3, [r7, #11]
	//determine the register CRL or CRH
	config_register =pin_config->GPIO_Pin_number <GPIO_PIN_8 ? &GPIOX->CRL:&GPIOX->CRH;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	2bff      	cmp	r3, #255	; 0xff
 80003c2:	d801      	bhi.n	80003c8 <MCAL_GPIO_INIT+0x1e>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	e001      	b.n	80003cc <MCAL_GPIO_INIT+0x22>
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3304      	adds	r3, #4
 80003cc:	60fb      	str	r3, [r7, #12]
	//clear the CNFy MODEy at the beginning
	*(config_register)&=~(0xf<<Get_CRLH_Position(pin_config->GPIO_Pin_number));
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ff87 	bl	80002e6 <Get_CRLH_Position>
 80003d8:	4603      	mov	r3, r0
 80003da:	461a      	mov	r2, r3
 80003dc:	230f      	movs	r3, #15
 80003de:	4093      	lsls	r3, r2
 80003e0:	43da      	mvns	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	401a      	ands	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	601a      	str	r2, [r3, #0]
	//if pin is output
	if((pin_config->GPIO_mode_define==GPIO_MODE_OUTPUT_PP)||(pin_config->GPIO_mode_define==GPIO_MODE_OUTPUT_OD)||(pin_config->GPIO_mode_define==GPIO_MODE_ALTF_OUTPUT_OD)||(pin_config->GPIO_mode_define==GPIO_MODE_ALTF_OUTPUT_PP))
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	789b      	ldrb	r3, [r3, #2]
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d00b      	beq.n	800040c <MCAL_GPIO_INIT+0x62>
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	789b      	ldrb	r3, [r3, #2]
 80003f8:	2b05      	cmp	r3, #5
 80003fa:	d007      	beq.n	800040c <MCAL_GPIO_INIT+0x62>
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	789b      	ldrb	r3, [r3, #2]
 8000400:	2b07      	cmp	r3, #7
 8000402:	d003      	beq.n	800040c <MCAL_GPIO_INIT+0x62>
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	789b      	ldrb	r3, [r3, #2]
 8000408:	2b06      	cmp	r3, #6
 800040a:	d10f      	bne.n	800042c <MCAL_GPIO_INIT+0x82>
	{
		PIN_CONFIG=((((pin_config->GPIO_mode_define-4)<<2)|(pin_config->GPIO_output_speed))&0x0f);
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	789b      	ldrb	r3, [r3, #2]
 8000410:	3b04      	subs	r3, #4
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	b25a      	sxtb	r2, r3
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	78db      	ldrb	r3, [r3, #3]
 800041a:	b25b      	sxtb	r3, r3
 800041c:	4313      	orrs	r3, r2
 800041e:	b25b      	sxtb	r3, r3
 8000420:	b2db      	uxtb	r3, r3
 8000422:	f003 030f 	and.w	r3, r3, #15
 8000426:	b2db      	uxtb	r3, r3
 8000428:	72fb      	strb	r3, [r7, #11]
 800042a:	e02f      	b.n	800048c <MCAL_GPIO_INIT+0xe2>
	}
	//if pin is input
	else
	{
		if((pin_config->GPIO_mode_define==GPIO_MODE_INPUT_FLO)||(pin_config->GPIO_mode_define==GPIO_MODE_Analog))
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	789b      	ldrb	r3, [r3, #2]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d003      	beq.n	800043c <MCAL_GPIO_INIT+0x92>
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	789b      	ldrb	r3, [r3, #2]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d108      	bne.n	800044e <MCAL_GPIO_INIT+0xa4>
				{
			PIN_CONFIG=((((pin_config->GPIO_mode_define)<<2)|0x0)&0x0f);
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	789b      	ldrb	r3, [r3, #2]
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	b2db      	uxtb	r3, r3
 8000444:	f003 030f 	and.w	r3, r3, #15
 8000448:	b2db      	uxtb	r3, r3
 800044a:	72fb      	strb	r3, [r7, #11]
 800044c:	e01e      	b.n	800048c <MCAL_GPIO_INIT+0xe2>
				}
		else if(pin_config->GPIO_mode_define==GPIO_MODE_AF_input)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	789b      	ldrb	r3, [r3, #2]
 8000452:	2b08      	cmp	r3, #8
 8000454:	d102      	bne.n	800045c <MCAL_GPIO_INIT+0xb2>
					{
				PIN_CONFIG=((((GPIO_MODE_INPUT_FLO)<<2)|0x0)&0xf);
 8000456:	2304      	movs	r3, #4
 8000458:	72fb      	strb	r3, [r7, #11]
 800045a:	e017      	b.n	800048c <MCAL_GPIO_INIT+0xe2>
					}
		else// PU or PD
		{
		if(pin_config->GPIO_mode_define==GPIO_MODE_INPUT_PU)
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	789b      	ldrb	r3, [r3, #2]
 8000460:	2b02      	cmp	r3, #2
 8000462:	d109      	bne.n	8000478 <MCAL_GPIO_INIT+0xce>
		{
			PIN_CONFIG=((((GPIO_MODE_INPUT_PU)<<2)|0x0)&0xf);
 8000464:	2308      	movs	r3, #8
 8000466:	72fb      	strb	r3, [r7, #11]
			GPIOX->ODR|=pin_config->GPIO_Pin_number;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	683a      	ldr	r2, [r7, #0]
 800046e:	8812      	ldrh	r2, [r2, #0]
 8000470:	431a      	orrs	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	e009      	b.n	800048c <MCAL_GPIO_INIT+0xe2>
		}
		else
		{
			PIN_CONFIG=((((GPIO_MODE_INPUT_PU)<<2)|0x0)&0xf);
 8000478:	2308      	movs	r3, #8
 800047a:	72fb      	strb	r3, [r7, #11]
			GPIOX->ODR&=~(pin_config->GPIO_Pin_number);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	8812      	ldrh	r2, [r2, #0]
 8000484:	43d2      	mvns	r2, r2
 8000486:	401a      	ands	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60da      	str	r2, [r3, #12]
		}
		}
	}
	//write on CRL or CRH
	(*config_register)|=((PIN_CONFIG)<<Get_CRLH_Position(pin_config->GPIO_Pin_number));
 800048c:	7afb      	ldrb	r3, [r7, #11]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	461c      	mov	r4, r3
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff25 	bl	80002e6 <Get_CRLH_Position>
 800049c:	4603      	mov	r3, r0
 800049e:	fa04 f203 	lsl.w	r2, r4, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	431a      	orrs	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	601a      	str	r2, [r3, #0]
}
 80004ac:	bf00      	nop
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd90      	pop	{r4, r7, pc}

080004b4 <MCAL_GPIO_Read_Pin>:
* @retval 		- the input pin value (two values based on @ref GPIO_PIN_STATE )
* Note			- none
*/

uint8_t MCAL_GPIO_Read_Pin(GPIO_typedef *GPIOX,uint16_t pin_number)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	807b      	strh	r3, [r7, #2]
	uint8_t status_bit;
	if((GPIOX->IDR)&(pin_number)!=(uint32_t)GPIO_Pin_RESET)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	887a      	ldrh	r2, [r7, #2]
 80004c6:	2a00      	cmp	r2, #0
 80004c8:	bf14      	ite	ne
 80004ca:	2201      	movne	r2, #1
 80004cc:	2200      	moveq	r2, #0
 80004ce:	b2d2      	uxtb	r2, r2
 80004d0:	4013      	ands	r3, r2
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d002      	beq.n	80004dc <MCAL_GPIO_Read_Pin+0x28>
	{
		status_bit=GPIO_Pin_SET;
 80004d6:	2301      	movs	r3, #1
 80004d8:	73fb      	strb	r3, [r7, #15]
 80004da:	e001      	b.n	80004e0 <MCAL_GPIO_Read_Pin+0x2c>
	}
	else
	{
		status_bit=GPIO_Pin_RESET;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
	}
	return status_bit;
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <MCAL_GPIO_toggle_Pin>:
* @param [in] 	- pin_number :specify the number of the pin
* @retval 		- none
* Note			- none
*/
void  MCAL_GPIO_toggle_Pin(GPIO_typedef *GPIOX,uint16_t pin_number)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR^=(uint32_t)pin_number;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	68da      	ldr	r2, [r3, #12]
 80004fc:	887b      	ldrh	r3, [r7, #2]
 80004fe:	405a      	eors	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	60da      	str	r2, [r3, #12]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2500      	movs	r5, #0
 8000514:	4e0c      	ldr	r6, [pc, #48]	; (8000548 <__libc_init_array+0x38>)
 8000516:	4c0d      	ldr	r4, [pc, #52]	; (800054c <__libc_init_array+0x3c>)
 8000518:	1ba4      	subs	r4, r4, r6
 800051a:	10a4      	asrs	r4, r4, #2
 800051c:	42a5      	cmp	r5, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	f000 f81a 	bl	8000558 <_init>
 8000524:	2500      	movs	r5, #0
 8000526:	4e0a      	ldr	r6, [pc, #40]	; (8000550 <__libc_init_array+0x40>)
 8000528:	4c0a      	ldr	r4, [pc, #40]	; (8000554 <__libc_init_array+0x44>)
 800052a:	1ba4      	subs	r4, r4, r6
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	42a5      	cmp	r5, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000538:	4798      	blx	r3
 800053a:	3501      	adds	r5, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000542:	4798      	blx	r3
 8000544:	3501      	adds	r5, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08000570 	.word	0x08000570
 800054c:	08000570 	.word	0x08000570
 8000550:	08000570 	.word	0x08000570
 8000554:	08000574 	.word	0x08000574

08000558 <_init>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr

08000564 <_fini>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr
