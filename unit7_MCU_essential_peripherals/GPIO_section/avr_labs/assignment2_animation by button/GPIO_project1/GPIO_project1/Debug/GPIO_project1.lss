
GPIO_project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000600  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000319  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "utils.h"
#include "util/delay.h"
int main(void)
{
int i=0,x=10;
DDRA=255;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
clearbit(DDRB,0);
  70:	87 b3       	in	r24, 0x17	; 23
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	87 bb       	out	0x17, r24	; 23
setbit(PORTB,0);
  76:	88 b3       	in	r24, 0x18	; 24
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	88 bb       	out	0x18, r24	; 24
#include "memmap.h"
#include "utils.h"
#include "util/delay.h"
int main(void)
{
int i=0,x=10;
  7c:	2a e0       	ldi	r18, 0x0A	; 10
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
DDRA=255;
clearbit(DDRB,0);
setbit(PORTB,0);
    while (1) 
    {
		if((getbit(PINB,0)==0)&&(x==10))
  84:	86 b3       	in	r24, 0x16	; 22
  86:	98 2f       	mov	r25, r24
  88:	91 70       	andi	r25, 0x01	; 1
  8a:	80 fd       	sbrc	r24, 0
  8c:	15 c0       	rjmp	.+42     	; 0xb8 <main+0x4c>
  8e:	2a 30       	cpi	r18, 0x0A	; 10
  90:	31 05       	cpc	r19, r1
  92:	91 f4       	brne	.+36     	; 0xb8 <main+0x4c>
		{
		setbit(PORTA,i);
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	04 2e       	mov	r0, r20
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <main+0x34>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	0a 94       	dec	r0
  a2:	e2 f7       	brpl	.-8      	; 0x9c <main+0x30>
  a4:	9b b3       	in	r25, 0x1b	; 27
  a6:	89 2b       	or	r24, r25
  a8:	8b bb       	out	0x1b, r24	; 27
		i++;
  aa:	ca 01       	movw	r24, r20
  ac:	01 96       	adiw	r24, 0x01	; 1
		if(i==8)
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	91 05       	cpc	r25, r1
  b2:	c1 f0       	breq	.+48     	; 0xe4 <main+0x78>
    while (1) 
    {
		if((getbit(PINB,0)==0)&&(x==10))
		{
		setbit(PORTA,i);
		i++;
  b4:	ac 01       	movw	r20, r24
  b6:	1b c0       	rjmp	.+54     	; 0xee <main+0x82>
		{
			i--;
			x=0;
		}
		}
		else if((getbit(PINB,0)==0)&&(x==0))
  b8:	91 11       	cpse	r25, r1
  ba:	19 c0       	rjmp	.+50     	; 0xee <main+0x82>
  bc:	21 15       	cp	r18, r1
  be:	31 05       	cpc	r19, r1
  c0:	b1 f4       	brne	.+44     	; 0xee <main+0x82>
		{
		clearbit(PORTA,i);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	04 2e       	mov	r0, r20
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <main+0x5e>
  d2:	80 95       	com	r24
  d4:	9b b3       	in	r25, 0x1b	; 27
  d6:	89 23       	and	r24, r25
  d8:	8b bb       	out	0x1b, r24	; 27
		i--;
  da:	ca 01       	movw	r24, r20
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	28 f0       	brcs	.+10     	; 0xea <main+0x7e>
  e0:	ac 01       	movw	r20, r24
  e2:	05 c0       	rjmp	.+10     	; 0xee <main+0x82>
		setbit(PORTA,i);
		i++;
		if(i==8)
		{
			i--;
			x=0;
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x82>
		clearbit(PORTA,i);
		i--;
		if(i==-1)
		{
			i++;
			x=10;
  ea:	2a e0       	ldi	r18, 0x0A	; 10
  ec:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	99 e6       	ldi	r25, 0x69	; 105
  f2:	68 e1       	ldi	r22, 0x18	; 24
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	60 40       	sbci	r22, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x88>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x92>
  fe:	00 00       	nop
 100:	c1 cf       	rjmp	.-126    	; 0x84 <main+0x18>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
